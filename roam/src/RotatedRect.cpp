#include "RotatedRect.h"

using namespace ROAM;

// -----------------------------------------------------------------------------------
Line::Line(const FLOAT_TYPE m, const FLOAT_TYPE b)
// -----------------------------------------------------------------------------------
{
    this->m = m;
    this->b = b;
}

// -----------------------------------------------------------------------------------
Line::Line(const cv::Point2f &p1, const cv::Point2f &p2)
// -----------------------------------------------------------------------------------
{
    this->m = FLOAT_TYPE(p1.y-p2.y) / FLOAT_TYPE(p1.x-p2.x);
    this->b = FLOAT_TYPE(p1.y) - this->m*p1.x;
}

// -----------------------------------------------------------------------------------
FLOAT_TYPE Line::Y(const FLOAT_TYPE x) const
// -----------------------------------------------------------------------------------
{
    return this->m * x + this->b;
}

// -----------------------------------------------------------------------------------
FLOAT_TYPE Line::M() const
// -----------------------------------------------------------------------------------
{
    return this->m; 
}

// -----------------------------------------------------------------------------------
FLOAT_TYPE Line::B() const
// -----------------------------------------------------------------------------------
{
    return this->b;
}

// -----------------------------------------------------------------------------------
Line Line::perpLinePassPoint(const Line &perp_to, const cv::Point &p1)
// -----------------------------------------------------------------------------------
{
    const FLOAT_TYPE m = static_cast<FLOAT_TYPE>(-1.0 / (perp_to.M() + std::numeric_limits<FLOAT_TYPE>::epsilon()));
    const FLOAT_TYPE b = static_cast<FLOAT_TYPE>(p1.y - m * p1.x);
    return Line(m, b);
}

// -----------------------------------------------------------------------------------
#if defined(_MSC_VER) && (_MSC_VER <= 1800) // fix MSVC partial implementation of constexpr
    const FLOAT_TYPE RotatedRect::inner_rect_threshold = static_cast<FLOAT_TYPE>(0.01);
#endif
// -----------------------------------------------------------------------------------

// -----------------------------------------------------------------------------------
RotatedRect::RotatedRect()
// -----------------------------------------------------------------------------------
{
    this->hack_flash = false;
    this->pA.x = this->pB.x = this->pC.x = this->pD.x = 0;
    this->pA.y = this->pB.y = this->pC.y = this->pD.y = 0;
   